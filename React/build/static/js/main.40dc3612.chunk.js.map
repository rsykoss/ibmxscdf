{"version":3,"sources":["useModel.js","object-detection-video/useWebcam.js","object-detection-video/retina-canvas.js","object-detection-video/render-predictions.js","object-detection-video/ObjectDetectionVideo.js","pages/cctv.js","Elderly/Register.js","routes/history.js","routes/routes.js","index.js"],"names":["useModel","modelPath","_useState","useState","_useState2","Object","slicedToArray","model","setModel","useEffect","models","load","then","useWebcam","videoRef","onLoaded","navigator","mediaDevices","getUserMedia","audio","video","facingMode","width","ideal","height","stream","current","srcObject","onloadedmetadata","getRetinaContext","canvas","ctx","getContext","scale","window","devicePixelRatio","setWidth","w","style","setHeight","h","clearAll","clearRect","x","y","setFont","font","size","parseInt","retinaFont","replace","setTextBaseLine","textBaseline","setStrokeStyle","strokeStyle","setLineWidth","lineWidth","strokeRect","setFillStyle","fillStyle","measureText","text","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","fillRect","fillText","getLabelText","prediction","scoreText","score","toFixed","concat","label","renderPredictions","predictions","textHeight","forEach","bbox","predictionText","Math","round","textWidth","border","xPadding","yPadding","ObjectDetectionVideo","React","memo","onPrediction","fit","mirrored","render","useRef","canvasRef","detectFrame","useCallback","asyncToGenerator","regenerator_default","a","mark","_callee","wantedWidth","wantedHeight","videoWidth","videoHeight","scaleX","scaleY","xOffset","yOffset","offsetPredictions","wrap","_context","prev","next","abrupt","detect","sent","offsetWidth","offsetHeight","min","max","map","objectSpread2","requestAnimationFrame","stop","position","left","top","objectFit","transform","react_default","createElement","autoPlay","playsInline","muted","ref","axios","require","default","accident","frame","majorFire","minorFire","majorFall","minorFall","handlePrediction","key","Date","now","length","console","log","severity","urlLink","includes","getImageURL","sendReq","push","document","getElementsByTagName","drawImage","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","i","charCodeAt","Blob","type","dataURItoBlob","toDataURL","image","bodyFormData","FormData","deviceKey","location","search","set","append","method","url","data","headers","Content-Type","Accept","response","catch","CCTV","className","object_detection_video_ObjectDetectionVideo","API_register","API_fetch","Register","Component","constructor","super","this","onChange","e","[object Object]","target","name","value","setState","componentDidMount","id","get","params","result","gender","age","address","devices","registerDevice","preventDefault","post","deviceType","state","newDevice","renderMyDevices","d","src","imageURL","alt","title","description","onClick","href","gotoCCTV","onSubmit","placeholder","defaultValue","history","Routes","react_router","path","exact","component","Home","ReactDOM","Navbar","bg","variant","sticky","Brand","Nav","Link","routes_Routes","getElementById"],"mappings":"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","file":"static/js/main.40dc3612.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\n\r\nimport models from '@cloud-annotations/models'\r\n\r\nconst useModel = (modelPath) => {\r\n  const [model, setModel] = useState()\r\n  useEffect(() => {\r\n    models.load(modelPath).then((model) => {\r\n      setModel(model)\r\n    })\r\n  }, [modelPath])\r\n  return model\r\n}\r\n\r\nexport default useModel\r\n","import { useEffect } from 'react'\r\n\r\nconst useWebcam = (videoRef, onLoaded) => {\r\n  useEffect(() => {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      navigator.mediaDevices\r\n        .getUserMedia({\r\n          audio: false,\r\n          video: {\r\n            facingMode: 'user',\r\n            width: { ideal: 4096 },\r\n            height: { ideal: 2160 },\r\n          },\r\n        })\r\n        .then((stream) => {\r\n          videoRef.current.srcObject = stream\r\n          videoRef.current.onloadedmetadata = () => {\r\n            onLoaded()\r\n          }\r\n        })\r\n    }\r\n  }, [onLoaded, videoRef])\r\n}\r\n\r\nexport default useWebcam\r\n","export const getRetinaContext = (canvas) => {\r\n  const ctx = canvas.getContext('2d')\r\n  const scale = window.devicePixelRatio\r\n  let width = canvas.width / scale\r\n  let height = canvas.height / scale\r\n  return {\r\n    setWidth: (w) => {\r\n      width = w\r\n      canvas.style.width = w + 'px'\r\n      canvas.width = w * scale\r\n    },\r\n    setHeight: (h) => {\r\n      height = h\r\n      canvas.style.height = h + 'px'\r\n      canvas.height = h * scale\r\n    },\r\n    width: width,\r\n    height: height,\r\n    clearAll: () => {\r\n      return ctx.clearRect(0, 0, width * scale, height * scale)\r\n    },\r\n    clearRect: (x, y, width, height) => {\r\n      return ctx.clearRect(x * scale, y * scale, width * scale, height * scale)\r\n    },\r\n    setFont: (font) => {\r\n      const size = parseInt(font, 10) * scale\r\n      const retinaFont = font.replace(/^\\d+px/, size + 'px')\r\n      ctx.font = retinaFont\r\n    },\r\n    setTextBaseLine: (textBaseline) => {\r\n      ctx.textBaseline = textBaseline\r\n    },\r\n    setStrokeStyle: (strokeStyle) => {\r\n      ctx.strokeStyle = strokeStyle\r\n    },\r\n    setLineWidth: (lineWidth) => {\r\n      ctx.lineWidth = lineWidth * scale\r\n    },\r\n    strokeRect: (x, y, width, height) => {\r\n      return ctx.strokeRect(x * scale, y * scale, width * scale, height * scale)\r\n    },\r\n    setFillStyle: (fillStyle) => {\r\n      ctx.fillStyle = fillStyle\r\n    },\r\n    measureText: (text) => {\r\n      const metrics = ctx.measureText(text)\r\n      return {\r\n        width: metrics.width / scale,\r\n        actualBoundingBoxLeft: metrics.actualBoundingBoxLeft / scale,\r\n        actualBoundingBoxRight: metrics.actualBoundingBoxRight / scale,\r\n        actualBoundingBoxAscent: metrics.actualBoundingBoxAscent / scale,\r\n        actualBoundingBoxDescent: metrics.actualBoundingBoxDescent / scale,\r\n      }\r\n    },\r\n    fillRect: (x, y, width, height) => {\r\n      return ctx.fillRect(x * scale, y * scale, width * scale, height * scale)\r\n    },\r\n    fillText: (text, x, y) => {\r\n      return ctx.fillText(text, x * scale, y * scale)\r\n    },\r\n  }\r\n}\r\n","const getLabelText = (prediction) => {\r\n  const scoreText = (prediction.score * 100).toFixed(1)\r\n  return `${prediction.label} ${scoreText}%`\r\n}\r\n\r\nexport const renderPredictions = (ctx, predictions) => {\r\n  // Font options.\r\n  const font = `${16}px 'ibm-plex-sans', Helvetica Neue, Arial, sans-serif`\r\n  ctx.setFont(font)\r\n  ctx.setTextBaseLine('top')\r\n  const border = 4\r\n  const xPadding = 16\r\n  const yPadding = 8\r\n  const offset = 6\r\n  const textHeight = parseInt(font, 10) // base 10\r\n\r\n  predictions.forEach((prediction) => {\r\n    const x = prediction.bbox[0]\r\n    const y = prediction.bbox[1]\r\n    const width = prediction.bbox[2]\r\n    const height = prediction.bbox[3]\r\n\r\n    const predictionText = getLabelText(prediction)\r\n\r\n    // Draw the bounding box.\r\n    ctx.setStrokeStyle('#0062ff')\r\n    ctx.setLineWidth(border)\r\n\r\n    ctx.strokeRect(\r\n      Math.round(x),\r\n      Math.round(y),\r\n      Math.round(width),\r\n      Math.round(height)\r\n    )\r\n    // Draw the label background.\r\n    ctx.setFillStyle('#0062ff')\r\n    const textWidth = ctx.measureText(predictionText).width\r\n    ctx.fillRect(\r\n      Math.round(x - border / 2),\r\n      Math.round(y - (textHeight + yPadding) - offset),\r\n      Math.round(textWidth + xPadding),\r\n      Math.round(textHeight + yPadding)\r\n    )\r\n  })\r\n\r\n  predictions.forEach((prediction) => {\r\n    const x = prediction.bbox[0]\r\n    const y = prediction.bbox[1]\r\n\r\n    const predictionText = getLabelText(prediction)\r\n    // Draw the text last to ensure it's on top.\r\n    ctx.setFillStyle('#ffffff')\r\n    ctx.fillText(\r\n      predictionText,\r\n      Math.round(x - border / 2 + xPadding / 2),\r\n      Math.round(y - (textHeight + yPadding) - offset + yPadding / 2)\r\n    )\r\n  })\r\n}\r\n","import React, { useRef, useCallback } from 'react'\r\n\r\nimport useWebcam from './useWebcam'\r\nimport { getRetinaContext } from './retina-canvas'\r\nimport { renderPredictions } from './render-predictions'\r\n\r\nconst ObjectDetectionVideo = React.memo(\r\n  ({ model, onPrediction, fit, mirrored, render }) => {\r\n    const videoRef = useRef()\r\n    const canvasRef = useRef()\r\n\r\n    useWebcam(videoRef, () => {\r\n      detectFrame()\r\n    })\r\n    const detectFrame = useCallback(async () => {\r\n      if (!model) return\r\n\r\n      const predictions = await model.detect(videoRef.current)\r\n      if (onPrediction) {\r\n        onPrediction(predictions)\r\n      }\r\n\r\n      const wantedWidth = videoRef.current.offsetWidth\r\n      const wantedHeight = videoRef.current.offsetHeight\r\n      const videoWidth = videoRef.current.videoWidth\r\n      const videoHeight = videoRef.current.videoHeight\r\n\r\n      const scaleX = wantedWidth / videoWidth\r\n      const scaleY = wantedHeight / videoHeight\r\n\r\n      let scale\r\n      if (fit === 'aspectFit') {\r\n        scale = Math.min(scaleX, scaleY)\r\n      } else {\r\n        scale = Math.max(scaleX, scaleY)\r\n      }\r\n\r\n      const xOffset = (wantedWidth - videoWidth * scale) / 2\r\n      const yOffset = (wantedHeight - videoHeight * scale) / 2\r\n\r\n      const ctx = getRetinaContext(canvasRef.current)\r\n\r\n      ctx.setWidth(wantedWidth)\r\n      ctx.setHeight(wantedHeight)\r\n      ctx.clearAll()\r\n      // Update predictions to match canvas.\r\n      const offsetPredictions = predictions.map((prediction) => {\r\n        let x = prediction.bbox[0] * scale + xOffset\r\n        const y = prediction.bbox[1] * scale + yOffset\r\n        const width = prediction.bbox[2] * scale\r\n        const height = prediction.bbox[3] * scale\r\n\r\n        if (mirrored) {\r\n          x = wantedWidth - x - width\r\n        }\r\n        return { ...prediction, bbox: [x, y, width, height] }\r\n      })\r\n\r\n      const renderFunction = render || renderPredictions\r\n\r\n      renderFunction(ctx, offsetPredictions)\r\n      requestAnimationFrame(() => {\r\n        detectFrame()\r\n      })\r\n    }, [fit, mirrored, model, onPrediction, render])\r\n\r\n    if (canvasRef.current) {\r\n      canvasRef.current.style.position = 'absolute'\r\n      canvasRef.current.style.left = '0'\r\n      canvasRef.current.style.top = '0'\r\n    }\r\n\r\n    if (videoRef.current) {\r\n      videoRef.current.style.width = '100%'\r\n      videoRef.current.style.height = '100%'\r\n      if (fit === 'aspectFit') {\r\n        videoRef.current.style.objectFit = 'contain'\r\n      } else {\r\n        videoRef.current.style.objectFit = 'cover'\r\n      }\r\n\r\n      if (mirrored) {\r\n        videoRef.current.style.transform = 'scaleX(-1)'\r\n      } else {\r\n        videoRef.current.style.transform = 'scaleX(1)'\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ position: 'relative' }}>\r\n        <video autoPlay playsInline muted ref={videoRef} />\r\n        <canvas ref={canvasRef} />\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nexport default ObjectDetectionVideo\r\n","import React from 'react'\r\n\r\nimport useModel from '../useModel'\r\nimport ObjectDetectionVideo from '../object-detection-video/ObjectDetectionVideo'\r\n\r\nimport '../index.css'\r\n\r\nconst axios = require('axios').default;\r\nvar accident\r\nvar frame = {majorFire: [], minorFire: [], majorFall: [], minorFall: []}\r\nconst t = 1000 // time in milisecond to confirm detection\r\nconst numDetected = 5 // num of accident detected in t\r\n\r\nconst handlePrediction = (predictions) => {\r\n  for(var key in frame) {\r\n    if(Date.now() - frame[key][0] >= t){\r\n      if (frame[key].length > numDetected) {\r\n        console.log(accident)\r\n        var severity, urlLink = \"\"\r\n        if(key.includes(\"minor\")){\r\n          severity = \"Minor\"\r\n          // urlLink = getImageURL()\r\n        }else {\r\n          severity = \"Major\"\r\n          urlLink = getImageURL()\r\n        }\r\n        // alert(key)\r\n        sendReq(urlLink, severity)\r\n        frame[key] = [] \r\n      } else frame[key] = []  // re initialise frame\r\n    }\r\n  }\r\n  predictions.forEach((prediction) => {\r\n    console.log(prediction.label)\r\n    if (prediction.label === \"Major kitchen fire\"){\r\n      accident = \"Fire\"\r\n      frame.majorFire.push(Date.now())\r\n    }else if (prediction.label === \"Minor kitchen fire\"){\r\n      accident = \"Fire\"\r\n      frame.minorFire.push(Date.now())\r\n    }else if (prediction.label === \"Major Fall\"){\r\n      accident = \"Accident\"\r\n      frame.majorFall.push(Date.now())\r\n    }else if (prediction.label === \"Minor Fall\"){\r\n      accident = \"Accident\"\r\n      frame.minorFall.push(Date.now())\r\n    }\r\n  })  \r\n  console.log(predictions[0])\r\n  // console.timeEnd('detect')\r\n  // console.time('detect')\r\n}\r\n\r\nconst getImageURL = () => {\r\n  var video = document.getElementsByTagName('video')[0];\r\n  var canvas = document.getElementsByTagName('canvas')[0];\r\n  var ctx = canvas.getContext('2d')\r\n  ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n  const imgUrl =canvas.toDataURL('image/png')\r\n  return dataURItoBlob(imgUrl)\r\n}\r\nfunction dataURItoBlob(dataURI) {\r\n  // convert base64/URLEncoded data component to raw binary data held in a string\r\n  var byteString;\r\n  if (dataURI.split(',')[0].indexOf('base64') >= 0)\r\n      byteString = atob(dataURI.split(',')[1]);\r\n  else\r\n      byteString = unescape(dataURI.split(',')[1]);\r\n  // separate out the mime component\r\n  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n  // write the bytes of the string to a typed array\r\n  var ia = new Uint8Array(byteString.length);\r\n  for (var i = 0; i < byteString.length; i++) {\r\n      ia[i] = byteString.charCodeAt(i);\r\n  }\r\n  return new Blob([ia], {type:mimeString});\r\n}\r\n\r\nfunction sendReq(image, severity) {\r\n  var bodyFormData = new FormData();\r\n  let search = window.location.search;\r\n  var deviceKey = search.split('=')[1]\r\n  console.log(deviceKey)\r\n  bodyFormData.set('deviceKey', deviceKey);\r\n  bodyFormData.append('image', image);\r\n  bodyFormData.set('severity', severity);\r\n  bodyFormData.set('eventType', accident);\r\n  axios({\r\n    method: 'post',\r\n    url: 'https://kampung-api.herokuapp.com/iot/report',\r\n    data: bodyFormData,\r\n    headers: {'Content-Type': 'multipart/form-data', \"Accept\": \"application/json\", \"type\": \"formData\" }\r\n    })\r\n    .then(function (response) {\r\n        console.log(response);\r\n    })\r\n    .catch(function (response) {\r\n        console.log(response);\r\n    });\r\n}\r\n\r\nconst render = (ctx, predictions) => {\r\n  predictions.forEach((prediction) => {\r\n    const x = prediction.bbox[0]\r\n    const y = prediction.bbox[1]\r\n    const width = prediction.bbox[2]\r\n    const height = prediction.bbox[3]\r\n\r\n    ctx.setStrokeStyle('#0062ff')\r\n    ctx.setLineWidth(4)\r\n    ctx.strokeRect(\r\n      Math.round(x),\r\n      Math.round(y),\r\n      Math.round(width),\r\n      Math.round(height)\r\n    )\r\n  })\r\n}\r\n\r\nconst CCTV = () => {\r\n  const model = useModel(process.env.PUBLIC_URL + '/model_web')\r\n  return (\r\n    <div className=\"fillPage\">\r\n      <ObjectDetectionVideo\r\n        model={model}\r\n        onPrediction={handlePrediction}\r\n        // aspectFill: The option to scale the video to fill the size of the view.\r\n        //             Some portion of the video may be clipped to fill the view's\r\n        //             bounds.\r\n        // aspectFit:  The option to scale the video to fit the size of the view\r\n        //             by maintaining the aspect ratio. Any remaining area of the\r\n        //             view's bounds is transparent.\r\n        fit=\"aspectFill\"\r\n        // mirrored:   mirror the video about its vertical axis.\r\n        mirrored\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n// const rootElement = document.getElementById('root')\r\n// ReactDOM.render(<App />, rootElement)\r\nexport default CCTV;\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport './register.css'\r\nimport { Link } from 'react-router-dom';\r\n// import Profile from './Profile'\r\n\r\nconst API_register = 'https://kampung-api.herokuapp.com/iot/registerDevice'\r\nconst API_fetch = 'https://kampung-api.herokuapp.com/iot/fetchAllDevices'\r\n\r\n\r\nclass Register extends Component {\r\n\r\n    // register page\r\n    // register device\r\n    // post filled form to db (update db)\r\n    // get device type & key\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name: \"\",\r\n            address: \"\",\r\n            deviceType: \"\",\r\n            devices: [],\r\n        };\r\n    }\r\n\r\n    onChange = (e) => {\r\n\r\n        console.log({ [e.target.name]: e.target.value })\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let search = window.location.search;\r\n        var id = search.split('=')\r\n        if (id.length == 2){\r\n            id = id[1]\r\n        } else \r\n            id = ''\r\n        console.log(id)\r\n        axios.get(API_fetch, {params: {id:id}})\r\n            .then((result) => {\r\n            this.setState({\r\n                id: result.id,\r\n                name: result.data.name,\r\n                gender: result.data.gender,\r\n                age: result.data.age,\r\n                address: result.data.address,\r\n                devices: result.data.devices.length > 0 ? result.data.devices : []\r\n            })\r\n\r\n        });\r\n    }\r\n\r\n\r\n    registerDevice = (e) => {\r\n        e.preventDefault();\r\n        axios.post(API_register, { deviceType: \"cctv\", id: this.state.id })\r\n        .then((response) => {\r\n            \r\n            this.setState(state => {\r\n                const devices = state.devices.concat(response.data.newDevice);\r\n                return {devices}\r\n            })\r\n        });\r\n        \r\n        \r\n        return <div className=\"container\">\r\n            {this.renderMyDevices()}\r\n        </div>\r\n\r\n    }\r\n\r\n    renderMyDevices() {\r\n        if (!this.state.devices) return <div />\r\n        return this.state.devices.map(d => {\r\n            // let imageURL = d.type == 'cctv' ? 'https://images.unsplash.com/photo-1565591452825-67d6b7df1d47?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60' : 'https://images.unsplash.com/photo-1586001348188-05bd8063cb7f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60'\r\n            return <div className=\"card size\">  \r\n                <img src={d.imageURL} className=\"card-img-top\" alt=\"...\" />\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{d.title}</h5>\r\n                    <p className=\"card-text\">{d.description}</p>\r\n                    <button className=\"btn btn-primary\" onClick={() => gotoCCTV(d.deviceKey)}>{d.type}</button>\r\n                </div>\r\n            </div>\r\n            return <div> {d.imageURL} | {d.deviceKey}</div>\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"bg\">\r\n                <div className=\"outer\">\r\n                    <div className='card side'>\r\n                        <form className='form' style={{ width: '100%'}} onSubmit={this.registerDevice}>\r\n                            <label className=\"space\">Name:</label>\r\n                            <br />\r\n                            <input type=\"text\" name=\"name\" placeholder=\"John Tay\" onChange={this.onChange} />\r\n\r\n                            <br />\r\n                            <label className=\"space\">Address: </label>\r\n                            <br />\r\n                            <input type=\"text\" name=\"address\" placeholder=\"NTU\" onChange={this.onChange} />\r\n\r\n                            <br />\r\n                            <label className=\"space\">Device Type: </label>\r\n                            <br />\r\n                            <select className=\"dropdown\" defaultValue={this.state.deviceType} onChange={this.onChange}>\r\n                                <option value=\"CCTV\">CCTV</option>\r\n                                <option value=\"Sensor\">Sensor</option>\r\n                            </select>\r\n\r\n                            <div className=\"space\"></div>\r\n                            <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\r\n                        </form>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"outer box\">\r\n                    {this.renderMyDevices()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nfunction gotoCCTV(key) {\r\n    window.location.href = \"https://kampung-api.herokuapp.com/cctv?productKey=\"+key;\r\n}\r\nexport default Register;\r\n","import { createBrowserHistory as history} from 'history';\r\n\r\nexport default history();","import React, { Component } from \"react\";\r\nimport { Router, Switch, Route } from \"react-router-dom\";\r\n\r\n/**\r\n * Import all page components here\r\n */\r\n// import App from './app';\r\nimport CCTV from '../pages/cctv';\r\n// import Home from '../pages/Home';\r\n// import Profile from '../Elderly/Profile';\r\nimport Home from '../Elderly/Register';\r\nimport history from './history';\r\n\r\nexport default class Routes extends Component {\r\n  render() {\r\n      return (\r\n          <Router history={history}>\r\n              <Switch>\r\n                  <Route path=\"/\" exact component={Home} />\r\n                  <Route path=\"/cctv\" component={CCTV} />\r\n              </Switch>\r\n          </Router>\r\n      )\r\n  }\r\n}","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport {Navbar, Nav, Button} from 'react-bootstrap';\r\nimport './index.css';\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\nimport Navigation from './pages/Navbar';\r\nimport Routes from './routes/routes';\r\n\r\n// import CCTV from './cctv';\r\n\r\nReactDOM.render(\r\n    <div className=\"App\">\r\n        <Navbar bg=\"dark\" variant=\"dark\" className=\"bar\" sticky=\"top\">\r\n            <Navbar.Brand href=\"/\" className=\"brand\">The Kampung Network</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"/\">Home</Nav.Link>\r\n            </Nav>\r\n            <Nav >\r\n                <Nav.Link className=\"mr-auto\" href=\"#pricing\">Log Out</Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n        <Routes />\r\n    </div>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}